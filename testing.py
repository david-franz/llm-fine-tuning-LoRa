# -*- coding: utf-8 -*-
"""AIML428_a2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cggzLxhuXs3Xf8bm0YPamChEoVD4JgsU
"""

# Commented out IPython magic to ensure Python compatibility.
# #Installation of libraries and dependencies
# 
# %%capture
# import os
# if "COLAB_" not in "".join(os.environ.keys()):
#     !pip install unsloth
# else:
#     # Do this only in Colab notebooks! Otherwise use pip install unsloth
#     !pip install --no-deps bitsandbytes accelerate xformers==0.0.29.post3 peft trl triton cut_cross_entropy unsloth_zoo
#     !pip install sentencepiece protobuf datasets huggingface_hub hf_transfer
#     !pip install --no-deps unsloth

import torch

if torch.cuda.is_available():
    print("GPU is available")
else:
    print("GPU is not available")

from unsloth import FastLanguageModel
from datasets import Dataset, load_dataset
from huggingface_hub import login
import torch

model_name = "Qwen/Qwen2.5-0.5B"

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name=model_name,
    max_seq_length=1024,
    dtype=None,
    load_in_4bit=True,
    device_map={"": 0}
)

# Define the prompt
prompt = "If I don't have a mental breakdown before the end of summer, it will be a miracle.."

# Tokenize the prompt and create attention mask
inputs = tokenizer(prompt, return_tensors="pt")
input_ids = inputs.input_ids.cuda()
attention_mask = inputs.attention_mask.cuda()

# Generate text
generated_ids = model.generate(input_ids, attention_mask=attention_mask, max_new_tokens=32)

# Decode only the generated portion
generated_text = tokenizer.decode(generated_ids[0, input_ids.shape[1]:], skip_special_tokens=True) # Decode from the end of the prompt

# Print the generated text
print(generated_text)

pip install --upgrade --no-cache-dir "unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git@nightly"

from unsloth import FastLanguageModel

import os
import torch
from datasets import Dataset, load_dataset
from huggingface_hub import login
from unsloth import unsloth_train

from trl import SFTTrainer
from transformers import TrainingArguments
from unsloth import is_bfloat16_supported
from unsloth import UnslothTrainer, UnslothTrainingArguments

from huggingface_hub import login, HfApi, create_repo, Repository

curr_model = f"unsloth/llama-3-8b"

'''
hf_token = "xxxxxxxxxxxxxxxxxxxxx" #to upload your model to Hugging Face you need an account!
login(token = hf_token) #writeToken
'''

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name = curr_model,
    max_seq_length = 2048,
    dtype = None,
    load_in_4bit = True,
    device_map = {"": 0}
)


model = FastLanguageModel.get_peft_model(
    model,
    r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
    target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                    "gate_proj", "up_proj", "down_proj"],
    lora_alpha = 16,
    lora_dropout = 0, # Supports any, but = 0 is optimized
    bias = "none",    # Supports any, but = "none" is optimized
    use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
    random_state = 42,
    use_rslora = False,  # We support rank stabilized LoRA
    loftq_config = None, # And LoftQ
)


#this changes depending on the model>
EOS_TOKEN = tokenizer.eos_token
def formatting_prompts_func(examples):
    return { "text" : [example + EOS_TOKEN for example in examples["mi"]] }

#dataset = load_dataset(curr_doc, 'wikitext-103-raw-v1', split = "train")
dataset = load_dataset("jinglishi0206/Maori_English_New_Zealand", split="train")
#dataset = load_dataset("PleIAs/NewZealand-PD-Newspapers", split="train")
dataset = dataset.map(formatting_prompts_func, batched = True,)

Nsample = 100
dataset = dataset.select(range(Nsample))

trainer = UnslothTrainer(
    model = model,
    tokenizer = tokenizer,
    train_dataset = dataset,
    dataset_text_field = "text",
    max_seq_length = 2048,
    dataset_num_proc = 2,

    args = UnslothTrainingArguments(
        per_device_train_batch_size = 2,
        gradient_accumulation_steps = 4,
    warmup_steps = 5,
    # num_train_epochs = 1, # Set this for 1 full training run.
    max_steps = 60,
    learning_rate = 2e-4,
    fp16 = not is_bfloat16_supported(),
    bf16 = is_bfloat16_supported(),
    logging_steps = 1,
    optim = "adamw_8bit",
    weight_decay = 0.01,
    lr_scheduler_type = "linear",
    seed = 42,
    output_dir = "outputs",
    report_to = "none",
    ),
)

trainer_stats = trainer.train()


#If you want to push your new model to Hugging Face, you can use this code. (You'll need an account for that bit.)
'''
repo_name = "llamaori-3-8b"
api = HfApi()
api.create_repo(repo_name, private=False)

model.push_to_hub(repo_name)
tokenizer.push_to_hub(repo_name)
'''

# this will write your LoRA adapters into “outputs/”
trainer.save_model("outputs")
# also save the tokenizer so you can reload it later
tokenizer.save_pretrained("outputs")

from unsloth import FastLanguageModel

# point to the folder where you saved
model, tokenizer = FastLanguageModel.from_pretrained(
    model_name    = "outputs",
    max_seq_length= 2048,
    dtype         = None,
    load_in_4bit  = True,
    device_map    = {"": 0},         # or "auto"
)

# this switch turns on Unsloth’s 2× faster inference paths
FastLanguageModel.for_inference(model)  # :contentReference[oaicite:0]{index=0}

import torch.nn.functional as F
import torch


def inference_inspect(model, tokenizer, prompt):
    FastLanguageModel.for_inference(model)
    device = model.device
    input_ids = tokenizer.encode(prompt, return_tensors="pt").to(device)

    top10_list = []

    output = model.generate(
        input_ids,
        max_new_tokens=32,
        return_dict_in_generate=True,
        output_scores=True
    )

    scores = output.scores  #scores is a tensor of the logit for each token in the vocabulary, for each generated token.
    generated_ids = output.sequences #these are the tokens that are stochastically generated..
    new_ids = generated_ids[:, input_ids.shape[-1]:]

    for nscore in range(len(scores)):
        score = scores[nscore]
        probs = F.softmax(score, dim=-1) #turns logits into probabilities..
        top_tokens = torch.topk(probs, 25)

        #define a list of decoded words and their probabilities
        top_tokens_decode = [tokenizer.batch_decode(t) for t in top_tokens.indices.tolist()]
        top10_list.append((
            top_tokens_decode,
            [v for v in top_tokens.values.tolist()],
            top_tokens_decode[0].index(tokenizer.decode(new_ids[0][nscore])) #which index for each token is selected

        ))

    doc = tokenizer.decode(generated_ids[0], skip_special_tokens=True)
    return doc, top10_list

from unsloth import FastLanguageModel


import matplotlib.pyplot as plt

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name    = "outputs",
    max_seq_length= 2048,
    dtype         = None,
    load_in_4bit  = True,
    device_map    = {"": 0},         # or "auto"
)


prompt = "Victoria University is in Kelburn and"
doc, top10_list = inference_inspect(model,tokenizer, prompt)


print("Model: ", model_name)
print(doc)

sample = 0

plt.title("Model: "+ model_name)
plt.bar(top10_list[sample][0][0][:5], top10_list[sample][1][0][:5])
plt.show()
